@inject NavigationManager navigationManager
@inject LibroService libroService
@inject TipoLibroService tipoLibroService

<h2>@titulo</h2>

<EditForm Model="@oLibroFormCLS" OnValidSubmit="@guardar">
    <DataAnnotationsValidator />

    <div class="mt-3">
        <label>Id Libro</label>
        <InputNumber readonly class="form-control" @bind-Value="oLibroFormCLS.idLibro" />
        <ValidationMessage For="(() => oLibroFormCLS.idLibro)" />
    </div>

    <div class="mt-3">
        <label>Título</label>
        <InputText class="form-control" @bind-Value="oLibroFormCLS.titulo" />
        <ValidationMessage For="(() => oLibroFormCLS.titulo)" />
    </div>

    <div class="mt-3">
        <label>Tipo de Libro</label>
        <InputSelect class="form-control" @bind-Value="oLibroFormCLS.idTipoLibro">
            <option value="0">-- Seleccione --</option>
            @foreach (var tipo in listaTipoLibro)
            {
                <option value="@tipo.idTipoLibro">@tipo.nombreTipoLibro</option>
            }
        </InputSelect>
        <ValidationMessage For="(() => oLibroFormCLS.idTipoLibro)" />
    </div>

    <div class="mt-3">
        <label>Resumen</label>
        <InputTextArea class="form-control" @bind-Value="oLibroFormCLS.resumen" />
        <ValidationMessage For="(() => oLibroFormCLS.resumen)" />
    </div>
    <div class="mt-3">
        <img src="@imagePreview" alt="Image Preview" width="150" height="150" style="border:1px solid" />
    </div>
    <div class="mt-2">
        <InputFile OnChange="HandleSelected" accept="image/*"/>
    </div>

    

    <div class="mt-4">
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="@regresar">Regresar</button>
    </div>
</EditForm>

@code {
    private string? imagePreview = "/img/default.png"; // Se establece para cuando realice la edicion eto se muestre en un recuadro
    private async Task HandleSelected(InputFileChangeEventArgs e) // Manda un archivo que se haya seleccionado en el exploraodor
    {
        //Obtener el archivo seleccionado
        var file = e.File;

        if(file != null)
        {
            //Leer la imagen como byte[]
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            //Leer la imagen a base64 para mostrarla como una URL
            imagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }
    public LibroFormCLS oLibroFormCLS { get; set; } = new LibroFormCLS();
    public List<TipoLibroCLS> listaTipoLibro { get; set; } = new();

    [Parameter]
    public int idlibro { get; set; }

    public string titulo { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        listaTipoLibro = tipoLibroService.ListarTipoLibro(); // Usamos await si es async

        if (idlibro == 0)
        {
            titulo = "Agregar libro";
        }
        else
        {
            titulo = "Editar libro";
            oLibroFormCLS = libroService.recuperarLibroPorId(idlibro);
        }
    }


    private void guardar()
    {
       /*if (idlibro == 0)
        {
            libroService.guardarLibro(oLibroFormCLS);
        }
        else
        {
            libroService.actualizarLibro(oLibroFormCLS);
        }*/

        libroService.guardarLibro(oLibroFormCLS);
        navigationManager.NavigateTo("libro");
    }

    private void regresar()
    {
        navigationManager.NavigateTo("libro");
    }
}
